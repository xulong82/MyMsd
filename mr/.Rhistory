igap.smr = cbind(igap[c("V3", "V4", "V5")], F = .5, igap[c("V6", "V7", "V8")], N = 1e4)
head(igap.smr)
write.csv(igap.smr, file = "~/Git/merck/mr/IGAP_stage_1.smr", sep = "\t")
write.csv(igap.smr, file = "~/Git/merck/mr/IGAP_stage_1.smr", quote = F)
write.csv(igap.smr, file = "~/Git/merck/mr/IGAP_stage_1.smr", quote = F, sep = "\t")
write.table(igap.smr, file = "~/Git/merck/mr/IGAP_stage_1.smr", quote = F, sep = "\t")
write.table(igap.smr, file = "~/Git/merck/mr/IGAP_stage_1.smr", quote = F, sep = "\t", header = F)
write.table(igap.smr, file = "~/Git/merck/mr/IGAP_stage_1.smr", quote = F, sep = "\t", row.names = F, col.names = F)
head(igap.smr)
names(igap.smr) = c("SNP", "A1", "A2", "freq", "b", "se", "p", "n")
write.table(igap.smr, file = "~/Git/merck/mr/IGAP_stage_1.smr", quote = F, sep = "\t", row.names = F, col.names = T)
library(MendelianRandomization)
MRInputObject <- mr_input(bx = ldlc, bxse = ldlcse, by = chdlodds, byse = chdloddsse)
ldlc
rm(list = ls())
library(coloc)
library(snpStats)
install.packages("coloc")
library(coloc)
library(snpStats)
install.packages("snpStats")
source("https://bioconductor.org/biocLite.R")
biocLite("snpStats")
library(coloc)
?setClass
setClass("simdata", representation(df1="data.frame",df2="data.frame"))
?setMethod
setMethod("show", signature="simdata", function(object) {
cat("pair of simulated datasets, with",ncol(object@df1)-1,"SNPs and",nrow(object@df1),"samples.\n")
})
?setValidity
?show
nsnps=50, nsamples=200, causals=1:2, nsim=1
nsnps=50; nsamples=200; causals=1:2; nsim=1
cat("Generate",nsim,"small sets of data\n")
X1 <- matrix(rbinom(ntotal,1,0.4)+rbinom(ntotal,1,0.4),ncol=nsnps)
ntotal <- nsnps * nsamples * nsim
X1 <- matrix(rbinom(ntotal,1,0.4)+rbinom(ntotal,1,0.4),ncol=nsnps)
dim(X1)
Y1 <- rnorm(nsamples,rowSums(X1[,causals]),2)
plot(X1[, 1], Y1)
rbinom(10, 1, 0.2)
x2 <- matrix(rbinom(ntotal,1,0.4) + rbinom(ntotal,1,0.4), ncol=nsnps)
y2 <- rnorm(nsamples, rowSums(X2[,causals]),2)
y2 <- rnorm(nsamples, rowSums(x2[,causals]),2)
colnames(x1) <- colnames(x2) <- paste("s", 1:nsnps, sep="")
x1 <- matrix(rbinom(ntotal,1,0.4) + rbinom(ntotal,1,0.4), ncol=nsnps)
y1 <- rnorm(nsamples,rowSums(X1[,causals]),2)
x2 <- matrix(rbinom(ntotal,1,0.4) + rbinom(ntotal,1,0.4), ncol=nsnps)
y2 <- rnorm(nsamples, rowSums(x2[,causals]),2)
colnames(x1) <- colnames(x2) <- paste("s", 1:nsnps, sep="")
df1 <- cbind(y=y1, x1)
df1[1:10, 1:10]
df2 <- cbind(y = y2, x2)
sim.data <- function(nsnps=50, nsamples=200, causals=1:2) {
ntotal <- nsnps * nsamples
x1 <- matrix(rbinom(ntotal,1,0.4) + rbinom(ntotal,1,0.4), ncol=nsnps)
y1 <- rnorm(nsamples,rowSums(X1[,causals]),2)
x2 <- matrix(rbinom(ntotal,1,0.4) + rbinom(ntotal,1,0.4), ncol=nsnps)
y2 <- rnorm(nsamples, rowSums(x2[,causals]),2)
colnames(x1) <- colnames(x2) <- paste("s", 1:nsnps, sep="")
df1 <- cbind(y = y1, x1)
df2 <- cbind(y = y2, x2)
return(new("simdata", df1=as.data.frame(df1), df2=as.data.frame(df2)))
}
data <- sim.data(nsamples= 1000)
data
y1 <- data@df1$y
x1 <- new("SnpMatrix", as.matrix(data@df1[, -1]))
p1 <- snpStats::p.value(single.snp.tests(phenotype = y1, snp.data= x1), df = 1)
library(snpStats)
p1 <- snpStats::p.value(single.snp.tests(phenotype = y1, snp.data= x1), df = 1)
p1
col.summary(x1)
colSums(x1[, -1])
colMeans(x1)
colMeans(as.matrix(data@df1[, -1]))
?col.summary
y1
summary(y1 ~ as.matrix(data@df1[, 2]))
data@df1[, 2]
summary(lm(y1 ~ as.matrix(data@df1[, 2])))
had(p1)
head(p1)
?p.value
?single.snp.tests
single.snp.tests(phenotype = y1, snp.data= x1)
rm(list = ls())
setClass("simdata", representation(df1="data.frame", df2="data.frame"))
setMethod("show", signature="simdata", function(object) { cat("pair of simulated datasets, with",ncol(object@df1)-1,"SNPs and",nrow(object@df1),"samples.\n") })
sim.data <- function(nsnps=50, nsamples=200, causals=1:2) {
ntotal <- nsnps * nsamples
x1 <- matrix(rbinom(ntotal,1,0.4) + rbinom(ntotal,1,0.4), ncol=nsnps)
y1 <- rnorm(nsamples,rowSums(x1[, causals]),2)
x2 <- matrix(rbinom(ntotal,1,0.4) + rbinom(ntotal,1,0.4), ncol=nsnps)
y2 <- rnorm(nsamples, rowSums(x2[,causals]),2)
colnames(x1) <- colnames(x2) <- paste("s", 1:nsnps, sep="")
df1 <- cbind(y = y1, x1)
df2 <- cbind(y = y2, x2)
return(new("simdata", df1=as.data.frame(df1), df2=as.data.frame(df2)))
}
data <- sim.data(nsamples= 1000)
y1 <- data@df1$y
x1 <- new("SnpMatrix", as.matrix(data@df1[, -1]))
p1 <- snpStats::p.value(single.snp.tests(phenotype = y1, snp.data= x1), df = 1)
p1
maf <- col.summary(x1)[, "MAF"]
col.summary(x1)
colMeans(as.matrix(data@df1[, 2]))
(1 - colMeans(as.matrix(data@df1[, 2])))/2
x1
x1[1]
x1[1, ]
xx1 as.matrix(data@df1[, 2])
xx1 = as.matrix(data@df1[, 2])
xx1
means(xx1)
mean(xx1)
mean(xx1) / 2
sum(xx1)
sum(xx1) / 2000
maf <- col.summary(x1)[, "MAF"]
head(maf)
summary(lm(y1 ~ xx1))
p1 <- snpStats::p.value(single.snp.tests(phenotype = y1, snp.data= x1), df = 1)
head(p1)
zz = data@df1[, -1]
as.matrix(x1)
xx1 = as.matrix(x1)
str(xx1)
xx1@.Data
zz = x1@.Data
zz[1:10, 1:4]
str(zz)
rm(list = ls())
nsnps = 50
nsamples = 1e3
causals = 1:2
ntotal <- nsnps * nsamples
x1 <- matrix(rbinom(ntotal,1,0.4) + rbinom(ntotal,1,0.4), ncol=nsnps)
y1 <- rnorm(nsamples,rowSums(x1[, causals]),2)
x2 <- matrix(rbinom(ntotal,1,0.4) + rbinom(ntotal,1,0.4), ncol=nsnps)
y2 <- rnorm(nsamples, rowSums(x2[,causals]),2)
colnames(x1) <- colnames(x2) <- paste("s", 1:nsnps, sep="")
df1 <- cbind(y = y1, x1)
df2 <- cbind(y = y2, x2)
data = new("simdata", df1=as.data.frame(df1), df2=as.data.frame(df2))
xx1 <- new("SnpMatrix", as.matrix(data@df1[, -1]))
xx1
xx1@.Data
xx1@.Data[1:10, 1:5]
x1[1:10, 1:5]
maf <- col.summary(xx1)[, "MAF"]
head(maf)
zz = x1[, 1]
zz
zz = as.numeric(zz != 0)
zz
mean(zz)
mean(zz) / 2
Y1 <- data@df1$y
Y2 <- data@df2$y
X1 <- new("SnpMatrix",as.matrix(data@df1[, -1]))
X2 <- new("SnpMatrix",as.matrix(data@df2[, -1]))
p1 <- snpStats::p.value(single.snp.tests(phenotype=Y1, snp.data=X1),df=1)
p2 <- snpStats::p.value(single.snp.tests(phenotype=Y2, snp.data=X2),df=1)
maf <- col.summary(X2)[,"MAF"]
head(maf)
?finemap.abf
Y1 <- data@df1$Y
X1 <- new("SnpMatrix",as.matrix(data@df1[,-1]))
maf <- col.summary(X1)[,"MAF"]
head(maf)
Y1 <- data@df1$Y
X1 <- new("SnpMatrix",as.matrix(data@df1[,-1]))
maf <- col.summary(X1)[,"MAF"]
head(maf)
# use lm()
Y1 <- data@df1$Y
X1 <- as.matrix(data@df1[,-1])
maf <- colMeans(X2)/2
maf <- colMeans(X1)/2
head(maf)
tests1 <- lapply(1:ncol(X1), function(i) summary(lm(Y1 ~ X1[,i]))$coefficients[2,])
# use lm()
Y1 <- data@df1$Y
X1 <- as.matrix(data@df1[,-1])
tests1 <- lapply(1:ncol(X1), function(i) summary(lm(Y1 ~ X1[,i]))$coefficients[2,])
Y1 <- data@df1$y
# use lm()
Y1 <- data@df1$y
X1 <- as.matrix(data@df1[,-1])
tests1 <- lapply(1:ncol(X1), function(i) summary(lm(Y1 ~ X1[,i]))$coefficients[2,])
test1
tests1
p1 <- sapply(tests1,"[", 4)
beta <- sapply(test1, function(x) x[1])
tests1 <- lapply(1:ncol(X1), function(i) summary(lm(Y1 ~ X1[,i]))$coefficients[2,])
beta <- sapply(test1, function(x) x[1])
beta <- sapply(tests1, function(x) x[1])
beta
varbeta <- sapply(tests1, function(x) x[2]^2)
my.res <- finemap.abf(dataset=list(beta=beta, varbeta=varbeta, N=nrow(X1), sdY=sd(Y1), type="quant"))
my.res
head(varbeta)
beta / sqrt(verbeta)
beta / sqrt(varbeta)
W = 0.0001
r = W/(V+W)
head(myres)
myres <- finemap.abf(dataset=list(beta=beta, varbeta=varbeta, N=nrow(X1), sdY=sd(Y1), type="quant"))
head(myres)
W = 1e-4
W / (varbeta + W)
W = 1e-2
W / (varbeta + W)
W = 4e-2
W / (varbeta + W)
abf <- abf(beta=beta, se=sqrt(varbeta), W=0.04)
abf <- function(beta,se,W){
V = se**2
r = W/(V+W)
z2 = (beta/se)**2
abf = ((1-r)**0.5) * exp((z2/2)*r)
return(abf)
}
abf <- abf(beta=beta, se=sqrt(varbeta), W=0.04)
head(abf)
abf <- function(beta,se,W){
V = se**2
r = W/(V+W)
z2 = (beta/se)**2
abf = ((1-r)**0.5) * exp((z2/2)*r)
return(abf)
}
myabf <- abf(beta=beta, se=sqrt(varbeta), W=0.04)
head(myabf)
mypost = myabf/sum(myabf)
head(mypost)
head(myres)
?finemap.abf
myres <- finemap.abf(dataset=list(beta=beta, varbeta=varbeta, type="quant"))
head(beta)
head(varbeta)
p1 <- sapply(tests1,"[", 4)
myres = list()
myres$p1 <- sapply(tests1,"[", 4)
myres$maf <- colMeans(X1)/2
myres$beta <- sapply(tests1, function(x) x[1])
myres$varbeta <- sapply(tests1, function(x) x[2]^2)
myres$abf <- abf(beta=myres$beta, se=sqrt(myres$varbeta), W=0.04)
myres$post = myres$abf/sum(myres$abf)
head(myres)
myres = data.frame()
myres$p1 <- sapply(tests1,"[", 4)
myres$maf <- colMeans(X1)/2
myres$beta <- sapply(tests1, function(x) x[1])
maf <- colMeans(X1)/2
myres = data.frame(maf = maf)
myres$beta <- sapply(tests1, function(x) x[1])
myres$varbeta <- sapply(tests1, function(x) x[2]^2)
myres$abf <- finemap.abf(dataset=list(beta=beta, varbeta=varbeta, N=nrow(X1), sdY=sd(Y1), type="quant"))
dim(myres)
myres$abf <- abf(beta=myres$beta, se=sqrt(myres$varbeta), W=0.04)
myres$post = myres$abf/sum(myres$abf)
head(myres)
myres$p <- sapply(tests1, function(x) x[4])
head(myres)
tests1
myres2 = myres[myres$p < 1e-2, ]
myres2
myres2$abf2 <- abf(beta=myres2$beta, se=sqrt(myres2$varbeta), W=0.04)
myres2$post2 = myres2$abf2/sum(myres$abf2)
myres2
myres2 = myres[myres$p < 5e-2, ]
myres2$abf2 <- abf(beta=myres2$beta, se=sqrt(myres2$varbeta), W=0.04)
myres2$post2 = myres2$abf2/sum(myres$abf2)
myres2
myres2 = myres[myres$p < .1, ]
myres2$abf2 <- abf(beta=myres2$beta, se=sqrt(myres2$varbeta), W=0.04)
myres2$post2 = myres2$abf2/sum(myres$abf2)
myres2
myres2$post2 = myres2$abf2/sum(myres2$abf2)
myres2
myres2 = myres[myres$p < .05, ]
myres2$abf2 <- abf(beta=myres2$beta, se=sqrt(myres2$varbeta), W=0.04)
myres2$post2 = myres2$abf2/sum(myres2$abf2)
myres2
rm(list = ls())
library(coloc)
library(snpStats)
setClass("simdata", representation(df1 = "data.frame", df2 = "data.frame"))
setMethod("show", signature="simdata", function(object) { cat("pair of simulated datasets, with",ncol(object@df1)-1,"SNPs and",nrow(object@df1),"samples.\n") })
nsnps = 50
nsamples = 1e3
causals = 1:2
ntotal <- nsnps * nsamples
x1 <- matrix(rbinom(ntotal,1,0.4) + rbinom(ntotal,1,0.4), ncol=nsnps)
y1 <- rnorm(nsamples,rowSums(x1[, causals]),2)
x2 <- matrix(rbinom(ntotal,1,0.4) + rbinom(ntotal,1,0.4), ncol=nsnps)
y2 <- rnorm(nsamples, rowSums(x2[,causals]),2)
colnames(x1) <- colnames(x2) <- paste("s", 1:nsnps, sep="")
df1 <- cbind(y = y1, x1)
df2 <- cbind(y = y2, x2)
data = new("simdata", df1=as.data.frame(df1), df2=as.data.frame(df2))
Y1 <- data@df1$y
X1 <- new("SnpMatrix",as.matrix(data@df1[,-1]))
maf <- col.summary(X1)[,"MAF"]
head(maf)
head(col.summary(X1))
head(col.summary(X1))
Y1 <- data@df1$y
X1 <- as.matrix(data@df1[,-1])
tests1 <- lapply(1:ncol(X1), function(i) summary(lm(Y1 ~ X1[,i]))$coefficients[2,])
maf <- colMeans(X1)/2
head(maf)
Y1 <- data@df1$y
X1 <- new("SnpMatrix",as.matrix(data@df1[, -1]))
head(col.summary(X1))
X1 <- as.matrix(data@df1[,-1])
X1 <- new("SnpMatrix",as.matrix(data@df1[, -1]))
zz = x1[, 1]
zz
table(zz == 0)
X1 <- new("SnpMatrix",as.matrix(data@df1[, -1]), signature(from = "matrix", to = "SnpMatrix"))
X1 <- new("SnpMatrix",as.matrix(data@df1[, -1])+1)
head(col.summary(X1))
table(zz == 1)
table(zz == 2)
X1 <- new("SnpMatrix",as.matrix(data@df1[, -1]) + 1) # snpStat genotypes: 1/2/3
head(col.summary(X1))
p1 <- snpStats::p.value(single.snp.tests(phenotype=Y1, snp.data=X1), df=1)
head(p1)
Y1 <- data@df1$y
X1 <- as.matrix(data@df1[,-1])
head(maf)
test1 <- lapply(1:ncol(X1), function(i) summary(lm(Y1 ~ X1[,i]))$coefficients[2,])
beta <- sapply(test1, function(x) x[1])
varbeta <- sapply(test1, function(x) x[2]^2)
p <- sapply(test1, function(x) x[4])
myres = data.frame(beta, varbeta, p)
head(myres)
coloc.abf <- finemap.abf(dataset=list(beta = beta, varbeta = varbeta, N = nrow(X1), sdY = sd(Y1), type="quant"))
head(coloc.abf)
myabf <- function(beta, se, W){
V = se**2
r = W/(V+W)
z2 = (beta/se)**2
abf = ((1-r)**0.5) * exp((z2/2)*r)
return(abf)
}
myres$abf <- myabf(beta = myres$beta, se = sqrt(myres$varbeta), W = 0.04)
myres$post = myres$abf/sum(myres$abf)
head(myres)
head(p1)
rowSums(x1[, causals])
head(x1[, 1:10])
myres2 = myres[myres$p < .05, ]
myres2$abf2 <- myabf(beta = myres2$beta, se = sqrt(myres2$varbeta), W = 0.04)
myres2$post2 = myres2$abf2/sum(myres2$abf2)
myres2
# .95 credible set
myres <- myres[order(myres$post, decreasing = T),]
myres$cumpost <- cumsum(myres$post)
credset <- myres[1:min(which(fm$cumpost > 0.95)), ]
credset <- myres[1:min(which(myres$cumpost > 0.95)), ]
credset
Y1 <- data@df1$Y
Y2 <- data@df2$Y
X1 <- as.matrix(data@df1[, -1])
X2 <- as.matrix(data@df2[, -1])
test1 <- lapply(1:ncol(X1), function(i) summary(lm(Y1 ~ X1[,i]))$coefficients[2, ])
Y1 <- data@df1$y
Y2 <- data@df2$y
X1 <- as.matrix(data@df1[, -1])
X2 <- as.matrix(data@df2[, -1])
test1 <- lapply(1:ncol(X1), function(i) summary(lm(Y1 ~ X1[,i]))$coefficients[2, ])
test2 <- lapply(1:ncol(X2), function(i) summary(lm(Y2 ~ X2[,i]))$coefficients[2, ])
p1 <- sapply(test1,"[",4)
p1
test1
p2 <- sapply(test2, "[", 4)
head(p1)
head(p2)
maf <- colMeans(X2)/2
head(maf)
get.beta <- function(x) {
beta <- sapply(x,"[",1)
varbeta <- sapply(x, "[", 2)^2
return(list(beta = beta,varbeta = varbeta))
}
b1 <- get.beta(tests1)
b2 <- get.beta(tests2)
b1 <- get.beta(test1)
b2 <- get.beta(test2)
head(b1)
head(b2)
myres <- coloc.abf(dataset1 = list(pvalues = p1,N = nrow(X1), type = "quant"), dataset2 = list(pvalues = p2,N = nrow(X2),type = "quant"), MAF = maf)
print(myres[[1]])
myres <- coloc.abf(dataset1 = list(beta=b1$beta, varbeta=b1$varbeta, N=nrow(X1), sdY=sd(Y1), type="quant"),
dataset2 = list(beta=b2$beta, varbeta=b2$varbeta, N=nrow(X2), sdY=sd(Y2), type="quant"),
MAF = maf)
print(myres[[1]])
x1 <- matrix(rbinom(ntotal,1,0.4) + rbinom(ntotal,1,0.4), ncol=nsnps)
y1 <- rnorm(nsamples, rowSums(x1[, causals]), 2)
x2 <- matrix(rbinom(ntotal,1,0.4) + rbinom(ntotal,1,0.4), ncol=nsnps)
y2 <- rnorm(nsamples, rowSums(x2[, causals]), 2)
colnames(x1) <- colnames(x2) <- paste("s", 1:nsnps, sep="")
df1 <- cbind(y = y1, x1)
df2 <- cbind(y = y2, x2)
data = new("simdata", df1 = as.data.frame(df1), df2 = as.data.frame(df2))
Y1 <- data@df1$y
X1 <- new("SnpMatrix",as.matrix(data@df1[, -1]) + 1) # snpStat genotypes: 1/2/3
head(col.summary(X1))
p1 <- snpStats::p.value(single.snp.tests(phenotype=Y1, snp.data=X1), df = 1)
head(p1)
Y1 <- data@df1$y
Y2 <- data@df2$y
X1 <- as.matrix(data@df1[, -1])
X2 <- as.matrix(data@df2[, -1])
test1 <- lapply(1:ncol(X1), function(i) summary(lm(Y1 ~ X1[,i]))$coefficients[2, ])
test2 <- lapply(1:ncol(X2), function(i) summary(lm(Y2 ~ X2[,i]))$coefficients[2, ])
p1 <- sapply(test1, "[", 4)
p2 <- sapply(test2, "[", 4)
head(p1)
head(p2)
maf <- colMeans(X2) / 2
get.beta <- function(x) {
beta <- sapply(x,"[",1)
varbeta <- sapply(x, "[", 2)^2
return(list(beta = beta, varbeta = varbeta))
}
b1 <- get.beta(test1)
b2 <- get.beta(test2)
myres <- coloc.abf(dataset1 = list(pvalues = p1,N = nrow(X1), type = "quant"), dataset2 = list(pvalues = p2,N = nrow(X2),type = "quant"), MAF = maf)
print(myres[[1]])
myres <- coloc.abf(dataset1 = list(beta=b1$beta, varbeta=b1$varbeta, N=nrow(X1), sdY=sd(Y1), type="quant"),
dataset2 = list(beta=b2$beta, varbeta=b2$varbeta, N=nrow(X2), sdY=sd(Y2), type="quant"),
MAF = maf)
print(myres[[1]])
Y1 <- data@df1$y
X1 <- as.matrix(data@df1[,-1])
test1 <- lapply(1:ncol(X1), function(i) summary(lm(Y1 ~ X1[,i]))$coefficients[2, ])
beta <- sapply(test1, function(x) x[1])
varbeta <- sapply(test1, function(x) x[2]^2)
p <- sapply(test1, function(x) x[4])
myres = data.frame(beta, varbeta, p)
beta / sqrt(varbeta)
W / (varbeta + W)
coloc.abf <- finemap.abf(dataset=list(beta = beta, varbeta = varbeta, N = nrow(X1), sdY = sd(Y1), type="quant"))
head(coloc.abf)
myabf <- function(beta, se, W){
V = se**2
r = W/(V+W)
z2 = (beta/se)**2
abf = ((1-r)**0.5) * exp((z2/2)*r)
return(abf)
}
myres$abf <- myabf(beta = myres$beta, se = sqrt(myres$varbeta), W = 0.04)
myres$post = myres$abf/sum(myres$abf)
head(myres)
myres2 = myres[myres$p < .05, ]
myres2$abf2 <- myabf(beta = myres2$beta, se = sqrt(myres2$varbeta), W = 0.04)
myres2$post2 = myres2$abf2/sum(myres2$abf2)
myres2
Y1 <- data@df2$y
X1 <- as.matrix(data@df2[,-1])
test1 <- lapply(1:ncol(X1), function(i) summary(lm(Y1 ~ X1[,i]))$coefficients[2, ])
beta <- sapply(test1, function(x) x[1])
varbeta <- sapply(test1, function(x) x[2]^2)
p <- sapply(test1, function(x) x[4])
myres = data.frame(beta, varbeta, p)
coloc.abf <- finemap.abf(dataset=list(beta = beta, varbeta = varbeta, N = nrow(X1), sdY = sd(Y1), type="quant"))
head(coloc.abf)
myabf <- function(beta, se, W){
V = se**2
r = W/(V+W)
z2 = (beta/se)**2
abf = ((1-r)**0.5) * exp((z2/2)*r)
return(abf)
}
myres$abf <- myabf(beta = myres$beta, se = sqrt(myres$varbeta), W = 0.04)
myres$post = myres$abf/sum(myres$abf)
head(myres)
myres <- coloc.abf(dataset1 = list(pvalues = p1, N = nrow(X1), type = "quant"), dataset2 = list(pvalues = p2,N = nrow(X2),type = "quant"), MAF = maf)
print(myres[[1]])
?coloc.abf
dataset1 = list(pvalues = p1, N = nrow(X1), type = "quant")
dataset2 = list(pvalues = p2, N = nrow(X2), type = "quant")
myres <- coloc.abf(dataset1 = list(pvalues = p1, N = nrow(X1), type = "quant"), dataset2 = list(pvalues = p2, N = nrow(X2), type = "quant"), MAF = maf)
myres <- coloc.abf(dataset1, dataset2, MAF = maf)
dataset1 = list(beta = b1$beta, varbeta = b1$varbeta, N = nrow(X1), sdY = sd(Y1), type = "quant")
dataset2 = list(beta = b2$beta, varbeta = b2$varbeta, N = nrow(X2), sdY = sd(Y2), type = "quant")
dataset1 = list(beta = b1$beta, varbeta = b1$varbeta, N = nrow(X1), sdY = sd(Y1), type = "quant")
dataset2 = list(beta = b2$beta, varbeta = b2$varbeta, N = nrow(X2), sdY = sd(Y2), type = "quant")
myres <- coloc.abf(dataset1, dataset2, MAF = maf)
print(myres[[1]])
str(myres)
print(myres[[2]])
dataset1$N = 1e3
dataset2$N = 1e3
myres <- coloc.abf(dataset1, dataset2, MAF = maf)
print(myres[[1]])
print(myres[[2]])
dataset1$N = 1e2
dataset2$N = 1e2
myres <- coloc.abf(dataset1, dataset2, MAF = maf)
print(myres[[1]])
dataset1$N = 1e1
dataset2$N = 1e1
myres <- coloc.abf(dataset1, dataset2, MAF = maf)
print(myres[[1]])
