summary(f2)
zh %*% solve(cor(gs)) / sqrt(1e2) * 3
zh %*% solve(cor(gs)) / sqrt(1e2) * 9
zh %*% solve(cor(gs)) / sqrt(1e2)
coef(f2)
f1s = do.call(rbind, lapply(f1, function(x) coef(x)["g1", ]))
zh = f1s[, "t value"]
f2s = summary(f2)
f2s$coefficients
lh = f2s$coefficients[, "t value"]
plot(zh, lh)
lh
zh
lh = f2s$coefficients[-1, "t value"]
plot(zh, lh)
rm(list = ls())
g1 = rbinom(1e2, 2, .5)
noise = which(rbinom(1e2, 1, .1) == 1)
g2 = g1; g2[noise] = 2 - g2[noise]
cor(g1, g2)
g3 = rbinom(1e2, 2, .2)
noise = which(rbinom(1e2, 1, .1) == 1)
g4 = g3; g4[noise] = 2 - g4[noise]
g5 = rbinom(1e2, 2, .3)
g = cbind(g1, g2, g3, g4, g5)
library(lattice)
levelplot(cor(g))
cor(g)
levelplot(cor(g))
heatmap(cor(g))
heatmap2(cor(g))
?heatmap
levelplot(cor(g))
levelplot(cor(g))
gc = g[, c(2, 4)] # causal variants
bc = c(1, 2) # effect sizes
y = gc %*% bc + rnorm(1e2, 0, 3)
y
lm(y ~ g)
summary(lm(y ~ g))
y = gc %*% bc + rnorm(1e2, 0, 1)
summary(lm(y ~ g))
y = gc %*% bc + rnorm(1e2, 0, 2)
summary(lm(y ~ g))
bc = c(1, 1) # effect sizes
y = gc %*% bc + rnorm(1e2, 0, 2)
summary(lm(y ~ g))
bc = c(1, 2) # effect sizes
y = gc %*% bc + rnorm(1e2, 0, 2)
summary(lm(y ~ g))
var(y)
fc = colMeans(gc)
fc
fc = colMeans(gc) / 2
fc
2 * fc * (1 - fc)
bc^2
2 * fc * (1 - fc) * bc^2
fc
fc
fc * (1-fc)
0.48 * (1-0.48)
fc * (1-fc) * 2
sum(2 * fc * (1 - fc) * bc^2)
var(y)
z = rnorm(1e2, 0, 2)
var(z)
e = rnorm(1e2, 0, 2)
var(e)
y = gc %*% bc + e
summary(lm(y ~ g))
var(y)
fc = colMeans(gc) / 2
sum(2 * fc * (1 - fc) * bc^2)
var(y)
sum(2 * fc * (1 - fc) * bc^2)
var(e)
var(e)
gc
head(gc)
var(gc[, 1])
var(gc[, 2])
2 * fc * (1-fc)
apply(gc, 2, var)
sum(apply(gc, 2, var) * bc^2)
sum(2 * fc * (1 - fc) * bc^2)
var(y)
var(e)
2 * fc * (1-fc) # this is an approximation
sum(2 * fc * (1 - fc) * bc^2)
sum(apply(gc, 2, var) * bc^2)
g1 = rbinom(1e3, 2, .5)
noise = which(rbinom(1e3, 1, .1) == 1)
g2 = g1; g2[noise] = 2 - g2[noise]
g3 = rbinom(1e3, 2, .2)
noise = which(rbinom(1e3, 1, .1) == 1)
g4 = g3; g4[noise] = 2 - g4[noise]
g5 = rbinom(1e3, 2, .3)
g = cbind(g1, g2, g3, g4, g5)
library(lattice); levelplot(cor(g))
gc = g[, c(2, 4)] # causal variants
fc = colMeans(gc) / 2
fc
bc = c(1, 2) # effect sizes
e = rnorm(1e2, 0, 2)
var(e)
e = rnorm(1e3, 0, 2)
var(e)
y = gc %*% bc + e
var(y)
sum(2 * fc * (1 - fc) * bc^2)
sum(apply(gc, 2, var) * bc^2)
sum(2 * fc * (1 - fc) * bc^2) + var(e)
var(y)
sum(apply(gc, 2, var) * bc^2) + var(e)
apply(gc, 2, var)
0.5 + 0.45 * 4
2 * fc * (1-fc) # this is an approximation
apply(gc, 2, var)
g1 = rbinom(1e3, 2, .5)
noise = which(rbinom(1e3, 1, .1) == 1)
g2 = g1; g2[noise] = 2 - g2[noise]
g3 = rbinom(1e3, 2, .2)
noise = which(rbinom(1e3, 1, .1) == 1)
g4 = g3; g4[noise] = 2 - g4[noise]
g5 = rbinom(1e3, 2, .3)
g = cbind(g1, g2, g3, g4, g5)
library(lattice); levelplot(cor(g))
gc = g[, c(2, 4)] # causal variants
fc = colMeans(gc) / 2
bc = c(1, 2) # effect sizes
e = rnorm(1e3, 0, 2)
var(e)
y = gc %*% bc + e
var(y)
2 * fc * (1-fc) # this is an approximation
apply(gc, 2, var)
sum(2 * fc * (1 - fc) * bc^2)
sum(2 * fc * (1 - fc) * bc^2) + var(e)
var(y)
sum(apply(gc, 2, var) * bc^2)
sum(apply(gc, 2, var) * bc^2) + var(e)
sum(2 * fc * (1 - fc) * bc^2) + var(e)
summary(lm(y ~ g))
summary(lm(y ~ g))$sigma
h = var(e) / var(y)
(h = 1 - var(e) / var(y))
K = cor(g)
K
x = rnorm(1e3, 0, 2)
x1 = rnorm(1e3, 0, 2)
x2 = rnorm(1e3, 0, 2)
var(x1 * x2)
var(x1)
var(x2)
var(x2) * var(x1)
var(x1 * x2)
x2 = rnorm(1e3, 1, 2)
x1 = rnorm(1e3, 2, 2)
var(x1)
var(x2)
var(x1 * x2)
var(x1) * var(x2)
chol(K)
t(chol(K))
L = t(chol(K))
g %*% t(g)
K2 = g %*% t(g) / 2
dim(K2)
K2[1:5, 1:5]
K2 = g %*% t(g) / 5
K2[1:5, 1:5]
gs = apply(g, 2, scale)
K2 = gs %*% t(gs) / 2
K2[1:5, 1:5]
K2 = g %*% t(g) / 5
K2[1:5, 1:5]
K2 = gs %*% t(gs) / 5
K2[1:5, 1:5]
K = cor(t(g))
K[1:5, 1:5]
K = g %*% t(g) / 2
L = t(chol(K))
K[1:5, 1:5]
var(g)
var(t(g))
xx = var(t(g))
xx[1:10, 1:10]
cov(g)
cov(t(g))
x = cov(t(g))
x[1:10, 1:10]
cov(g[1, ], g[1, ])
g[1, ]
cov(g[1, ], g[2, ])
g[2, ]
g[3, ]
K = g %*% t(g) / 5
K[1:10, 1:10]
g[10, ]
L = t(chol(K))
library(rstan)
getwd()
model = stan_model("~/Git/mymsd/lmm.stan")
model = stan_model("~/Git/mymsd/lmm.stan")
model = stan_model("~/Git/mymsd/lmm.stan")
model = stan_model("~/Git/mymsd/lmm.stan")
model = stan_model("~/Git/mymsd/lmm.stan")
model = stan_model("~/Git/mymsd/lmm.stan")
data = list(N = 1e3, pheno = y, mymean = rep(0, 1e3), K = K)
myfit = sampling(model, data = data, chains = 2, iter = 2e2)
dim(y)
head(y)
data = list(N = 1e3, pheno = c(y), mymean = rep(0, 1e3), K = K)
str(data)
myfit = sampling(model, data = data, chains = 2, iter = 2e2)
g1 = rbinom(1e3, 2, .5)
noise = which(rbinom(1e3, 1, .1) == 1)
g2 = g1; g2[noise] = 2 - g2[noise]
g3 = rbinom(1e3, 2, .2)
noise = which(rbinom(1e3, 1, .1) == 1)
g4 = g3; g4[noise] = 2 - g4[noise]
g5 = rbinom(1e3, 2, .3)
g = cbind(g1, g2, g3, g4, g5)
library(lattice); levelplot(cor(g))
gc = gs[, c(2, 4)]
bc = c(1, 2)
gc = g[, c(2, 4)]
bc = c(1, 2)
y = gc %*% bc + rnorm(1e3, 0, 3)
f1 = apply(g, 2, function(g1) summary(lm(y ~ g1)))
f1s = do.call(rbind, lapply(f1, function(x) coef(x)["g1", ]))
f1s
zh = f1s[, "t value"]
f2 = lm(y ~ g)
f2s = summary(f2)
lh = f2s$coefficients[-1, "t value"]
lh
zh
R = t(g) %*% g / sqrt(1e3)
R[1:10, 1:10]
dim(R)
R
cor(g)
t(g) %*% g
mr = t(g) %*% g / sqrt(1e3)
solve(mr)
solve(mr) %*% zh
1 / sqrt(1e3) * solve(mr) %*% zh
f2s
lh = f2s$coefficients[-1, "Estimate"]
lh
1 / sqrt(1e3) * solve(mr) %*% zh
lh1 = 1 / sqrt(1e3) * solve(mr) %*% zh
lh2 = f2s$coefficients[-1, "t value"]
plot(lh1, lh2)
lh1
lh2
lh1 = 1 / sqrt(1e3) * solve(mr) %*% zh * 9
plot(lh1, lh2)
lh1
lh2 = f2s$coefficients[-1, "Estimate"]
lh2
plot(lh1, lh2)
var(y)
e = rnorm(1e3, 0, 3)
y = gc %*% bc + e
f1 = apply(g, 2, function(g1) summary(lm(y ~ g1)))
f1s = do.call(rbind, lapply(f1, function(x) coef(x)["g1", ]))
zh = f1s[, "t value"]
zh
mr = t(g) %*% g / sqrt(1e3)
lh1 = 1 / sqrt(1e3) * var(e) * solve(mr) %*% zh
lh1
g = apply(g, 2, scale)
head(g)
gc = g[, c(2, 4)]
bc = c(1, 2)
e = rnorm(1e3, 0, 3)
y = gc %*% bc + e
var(y)
sum(bc^2)
sum(bc^2) + var(e)
f1 = apply(g, 2, function(g1) summary(lm(y ~ g1)))
f1s = do.call(rbind, lapply(f1, function(x) coef(x)["g1", ]))
zh = f1s[, "t value"]
mr = t(g) %*% g / sqrt(1e3)
lh1 = 1 / sqrt(1e3) * var(e) * solve(mr) %*% zh
lh1
f2 = lm(y ~ g)
f2s = summary(f2)
lh2 = f2s$coefficients[-1, "Estimate"] # true model
lh2
r
mr
mr = t(g) %*% g / 1e3
mr
lh1 = 1 / sqrt(1e3) * var(e) * solve(mr) %*% zh
lh1
var(3)
var(e)
sd(e)
sd(e)^2
lh1 = 1 / sqrt(1e3) * sd(e) * solve(mr) %*% zh
lh1
lh2
lh1
g = cbind(g1, g2, g3, g4, g5)
gc = g[, c(2, 4)]
bc = c(1, 2)
e = rnorm(1e3, 0, 3)
y = gc %*% bc + e
var(y)
sum(bc^2) + var(e)
fc = colMeans(gc) / 2
sum(2 * fc * (1 - fc) * bc^2) + var(e)
var(y)
f1 = apply(g, 2, function(g1) summary(lm(y ~ g1)))
f1s = do.call(rbind, lapply(f1, function(x) coef(x)["g1", ]))
zh = f1s[, "t value"]
mr = t(g) %*% g / 1e3
lh1 = 1 / sqrt(1e3) * sd(e) * solve(mr) %*% zh
sd(e)
(lh1 = 1 / sqrt(1e3) * sd(e) * solve(mr) %*% zh)
f2 = lm(y ~ g)
f2s = summary(f2)
lh2 = f2s$coefficients[-1, "Estimate"] # true model
lh2
lh2 = f2s$coefficients[-1, "t value"]
lh2
lh1
lh2 = f2s$coefficients[-1, "Estimate"] # true model
plot(lh1, lh2)
plot(lh1, lh2); abline(0, 1)
data = data.frame(lh1, lh2)
data
bc
e = rnorm(1e3, 0, 2)
y = gc %*% bc + e
var(y)
sum(2 * fc * (1 - fc) * bc^2) + var(e)
f1 = apply(g, 2, function(g1) summary(lm(y ~ g1)))
f1s = do.call(rbind, lapply(f1, function(x) coef(x)["g1", ]))
zh = f1s[, "t value"]
mr = t(g) %*% g / 1e3
(lh1 = 1 / sqrt(1e3) * sd(e) * solve(mr) %*% zh)
f2 = lm(y ~ g)
f2s = summary(f2)
lh2 = f2s$coefficients[-1, "Estimate"] # true model
data = data.frame(lh1, lh2)
data
g1 = rbinom(1e3, 2, .5)
noise = which(rbinom(1e3, 1, .05) == 1)
g2 = g1; g2[noise] = 2 - g2[noise]
cor(g1, g2)
g3 = rbinom(1e3, 2, .2)
noise = which(rbinom(1e3, 1, .05) == 1)
g4 = g3; g4[noise] = 2 - g4[noise]
g5 = rbinom(1e3, 2, .3)
g = cbind(g1, g2, g3, g4, g5)
cor(g)
g = apply(g, 2, scale)
cor(g)
gc = g[, c(2, 4)]
fc = colMeans(gc) / 2
bc = c(1, 2)
e = rnorm(1e3, 0, 1)
y = gc %*% bc + e
var(y)
sum(2 * fc * (1 - fc) * bc^2) + var(e)
var(e)
var(gc)
diag(var(gc))
sum(diag(var(gc)) * bc^2) + var(e)
var(e)
f1 = apply(g, 2, function(g1) summary(lm(y ~ g1)))
f1s = do.call(rbind, lapply(f1, function(x) coef(x)["g1", ]))
zh = f1s[, "t value"]
mr = t(g) %*% g / 1e3
(lh1 = 1 / sqrt(1e3) * sd(e) * solve(mr) %*% zh)
f2 = lm(y ~ g)
f2s = summary(f2)
lh2 = f2s$coefficients[-1, "Estimate"] # true model
(lh2 = f2s$coefficients[-1, "Estimate"]) # true model
lh1
lh2
data = data.frame(lh1, lh2)
data$c = c(0, 1, 0, 1, 0)
data
ggplot(data, aes(x = lh1, y = lh2, color = as.factor(c))) + geom_point()
ggplot(data, aes(x = lh1, y = lh2, color = as.factor(c))) + geom_point() + ylab("True")
plot(lh1, lh2); abline(0, 1)
plot(lh1, lh2, ylab = "True"); abline(0, 1)
x = rbinom(1e3, 1, 0.2)
x
mean(x)
x1 = mean(x)
var(x)
x1 * (1-x1)
lh1
zh
f1 = apply(g, 2, function(g1) summary(lm(scale(y) ~ g1)))
f1s = do.call(rbind, lapply(f1, function(x) coef(x)["g1", ]))
zh = f1s[, "t value"]
zh
var(scale(y))
summary(lm(scale(y) ~ g))
plot(lh1, lh2, xlab = "Estimated", ylab = "True"); abline(0, 1)
r
mr
rnorm(1e2, 0, 0)
library(rstan)
mystan = "
data {
vector[N] x; // predictor
vector[N] y; // outcome vector
}
parameters {
real beta; // effect
real<lower=0> sigma; // variance
}
model {
beta ~ normal(0, 0);
y ~ normal(x * beta, sigma);  // likelihood
}
"
mystan
model = stan_model(model_code = mystan)
mystan = "
data {
int N; // size
vector[N] x; // predictor
vector[N] y; // outcome vector
}
parameters {
real beta; // effect
real<lower=0> sigma; // variance
}
model {
beta ~ normal(0, 0);
y ~ normal(x * beta, sigma);  // likelihood
}
"
model = stan_model(model_code = mystan)
xx = rnorm(1e2, 0, 1)
yy = 2 * xx + rnorm(1e2, 0, 1)
data = list(N = 100, x = xx, y = yy)
myfit = sampling(model, data = data, chains = 2, iter = 2e2)
mystan = "
data {
int N; // size
vector[N] x; // predictor
vector[N] y; // outcome vector
}
parameters {
real beta; // effect
real<lower=0> sigma; // variance
}
model {
beta ~ normal(0, 1e-4);
y ~ normal(x * beta, sigma);  // likelihood
}
"
model = stan_model(model_code = mystan)
xx = rnorm(1e2, 0, 1)
yy = 2 * xx + rnorm(1e2, 0, 1)
data = list(N = 100, x = xx, y = yy)
myfit = sampling(model, data = data, chains = 2, iter = 2e2)
myfit
mystan = "
data {
int N; // size
vector[N] x; // predictor
vector[N] y; // outcome vector
}
parameters {
real beta; // effect
real<lower=0> sigma; // variance
}
model {
//beta ~ normal(0, 1e-4); // to mimic 0
beta ~ normal(0, 1); //
y ~ normal(x * beta, sigma);  // likelihood
}
"
model = stan_model(model_code = mystan)
myfit = sampling(model, data = data, chains = 2, iter = 2e2)
print(myfit)
myfit
mystan = "
data {
int N; // size
vector[N] x; // predictor
vector[N] y; // outcome vector
}
parameters {
real beta; // effect
real<lower=0> sigma; // variance
}
model {
# beta ~ normal(0, 1e-4); // this is to mimic sigma = 0
beta ~ normal(0, 1); //
y ~ normal(x * beta, sigma);  // likelihood
}
"
model = stan_model(model_code = mystan)
xx = rnorm(1e2, 0, 1)
yy = 2 * xx + rnorm(1e2, 0, 1)
data = list(N = 100, x = xx, y = yy)
myfit = sampling(model, data = data, chains = 2, iter = 2e2)
print(myfit)
knitr::opts_chunk$set(echo = TRUE)
